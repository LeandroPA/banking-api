const swaggerAutogen = require('swagger-autogen')({openapi: '3.0.0'});
require('dotenv').config();

const outputFile = process.env.SWAGGER_OUTPUT_JSON_PATH;
const endpointsFiles = ['./src/app.js'];

const doc = {
    info: {
        version: process.env.npm_package_version,
        title: 'My API',
        description: 'Documentation automatically generated by the <b>swagger-autogen</b> module.'
    },
    servers: [
        {
            url: 'http://localhost:3000',
            description: 'banking-api-gateway'
        },
        {
            url: 'http://localhost:3001',
            description: 'client-api'
        },
        {
            url: 'http://localhost:3002',
            description: 'account-api'
        },
        {
            url: 'http://localhost:3003',
            description: 'transaction-api'
        }
    ],
    consumes: ['application/json'],
    produces: ['application/json'],
    tags: [
        {
            'name': 'account-api',
            'description': 'Endpoints'
        },
        {
            'name': 'client-api',
            'description': 'Endpoints'
        },
        {
            'name': 'transaction-api',
            'description': 'Endpoints'
        }
    ],
    components: {
        schemas: {
            'New Transaction': {
                account: '63cc9f72a23faefce2e1e80d', //Or
                value: 1000
            },
            Error: {
                errors: {
                    field: 'Error message'
                }
            }
        },
        '@schemas': {
            'Transaction': {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: 'Id of the transaction',
                        example: '63cca04bd6608851304d5f31'
                    },
                    account: {
                        type: 'string',
                        description: 'The account owner of the transaction',
                        example: '63cc9f72a23faefce2e1e80d'
                    },
                    value: {
                        type: 'number',
                        description: 'The value of the transaction, may be negative if <code>type == \'withdraw\'</code> for example.',
                        example: 1000
                    },
                    type: {
                        type: 'string',
                        'enum': ['deposit', 'withdraw'],
                        description: 'The type of transaction',
                        example: 'deposit'
                    },
                    date: {
                        type: 'string',
                        description: 'The date of transaction',
                        example: '2023-01-22T02:51:41.436Z'
                    }
                }
            },
            'New Transaction': {
                type: 'object',
                properties: {
                    account: {
                        type: 'string',
                        description: 'The account owner of the transaction',
                        example: '63cc9f72a23faefce2e1e80d'
                    },
                    value: {
                        type: 'number',
                        description: 'The value of the transaction.',
                        example: 1000
                    }
                }
            }
        },
        examples: {
            DepositTransaction: {                
                id: '63cca04bd6608851304d5f31',
                account: '63cc9f72a23faefce2e1e80d',
                value: 1000,
                type: 'deposit',
                date: '2023-01-22T02:51:41.436Z'  
            },
            WithdrawTransaction: {                
                id: '63cca04bd6608851304d5f31',
                account: '63cc9f72a23faefce2e1e80d',
                value: -1000,
                type: 'withdraw',
                date: '2023-01-22T02:51:41.436Z'  
            },
            NewTransaction: {                
                account: '63cc9f72a23faefce2e1e80d',
                value: 1000
            },
            TransactionRequiredFieldsError: {
                errors: {
                    value: "value is required",
                    account: "account is required"
                }
            },
            TransactionInvalidValueError: {
                errors: {
                    value: "value should be more than 0"
                }
            },
            TransactionAccountBlockedError: {
                errors: {
                    details: "account is blocked for transactions"
                }
            },
            TransactionAccountDisabledError: {
                errors: {
                    details: "account is disabled for transactions"
                }
            },
            TransactionInsufficientFundsError: {
                errors: {
                    details: "insufficient funds for transaction"
                }
            }

        },
        responses: {
            Transaction: {
                description: 'Transaction',
                content: {
                    'application/json': {
                        schema: {
                            $ref: '#/components/schemas/Transaction',
                        },
                        examples: {
                            'Deposit Transaction': {
                                $ref: '#/components/examples/DepositTransaction'
                            },
                            'Withdraw Transaction': {
                                $ref: '#/components/examples/WithdrawTransaction'
                            },
                        }
                    }
                }
            },
            DepositTransaction: {
                description: 'Deposit Transaction',
                content: {
                    'application/json': {
                        schema: {
                            $ref: '#/components/schemas/Transaction',
                        },
                        example: {
                            $ref: '#/components/examples/DepositTransaction',
                        },
                    }
                }
            },
            WithdrawTransaction: {
                description: 'Withdraw Transaction',
                content: {
                    'application/json': {
                        schema: {
                            $ref: '#/components/schemas/Transaction',
                        },
                        example: {
                            $ref: '#/components/examples/WithdrawTransaction',
                        },
                    }
                }
            },
            Balance: {
                description: 'Balance',
                content: {
                    'application/json': {
                        example: {
                            balance: 1000
                        }
                    }
                }
            },
            BadRequestDepositTransaction: {
                description: 'Invalid request',
                content: {
                    'application/json': {
                        schema: {
                            $ref: '#/components/schemas/Error',
                        },
                        examples: {
                            'When required fields are missing': {
                                $ref: '#/components/examples/TransactionRequiredFieldsError'
                            },
                            'When value is less or equal to 0': {
                                $ref: '#/components/examples/TransactionInvalidValueError'
                            },
                            'When the account is blocked for transactions': {
                                $ref: '#/components/examples/TransactionAccountBlockedError'
                            },
                            'When the account is disabled for transactions': {
                                $ref: '#/components/examples/TransactionAccountDisabledError'
                            },
                        }
                    }
                }
            },
            BadRequestWithdrawTransaction: {
                description: 'Invalid request',
                content: {
                    'application/json': {
                        schema: {
                            $ref: '#/components/schemas/Error',
                        },
                        examples: {
                            'When required fields are missing': {
                                $ref: '#/components/examples/TransactionRequiredFieldsError'
                            },
                            'When value is less or equal to 0': {
                                $ref: '#/components/examples/TransactionInvalidValueError'
                            },
                            'When the account is blocked for transactions': {
                                $ref: '#/components/examples/TransactionAccountBlockedError'
                            },
                            'When the account is disabled for transactions': {
                                $ref: '#/components/examples/TransactionAccountDisabledError'
                            },
                            'When the account has insufficient funds': {
                                $ref: '#/components/examples/TransactionInsufficientFundsError'
                            },
                        }
                    }
                }
            },
            AccountNotFound: {
                description: 'Accout not found',
                content: {
                    'application/json': {
                        schema: {
                            $ref: '#/components/schemas/Error',
                        },
                        example: {
                            errors: {
                                holder: "Account not found"
                            }
                        }
                    }
                }
            },
            NotFound: {
                description: 'Not Found'
            },
            InvalidId: {
                description: 'Invalid id',
                content: {
                    'application/json': {
                        schema: {
                            $ref: '#/components/schemas/Error',
                        },
                        example: {
                            errors: {
                                id: 'invalid id'
                            }
                        }
                    }
                }
            }
        }
    }
}

swaggerAutogen(outputFile, endpointsFiles, doc);