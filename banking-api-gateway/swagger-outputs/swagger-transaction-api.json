{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "My API",
    "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "banking-api-gateway"
    },
    {
      "url": "http://localhost:3001",
      "description": "client-api"
    },
    {
      "url": "http://localhost:3002",
      "description": "account-api"
    },
    {
      "url": "http://localhost:3003",
      "description": "transaction-api"
    }
  ],
  "tags": [
    {
      "name": "account-api",
      "description": "Endpoints"
    },
    {
      "name": "client-api",
      "description": "Endpoints"
    },
    {
      "name": "transaction-api",
      "description": "Endpoints"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/transaction/deposit": {
      "post": {
        "tags": [
          "transaction-api"
        ],
        "summary": "Create a deposit transaction",
        "description": "Endpoint to create a deposit transaction.",
        "operationId": "deposit",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "$ref": "#/components/responses/DepositTransaction"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestDepositTransaction",
            "description": "Bad Request"
          },
          "404": {
            "$ref": "#/components/responses/AccountNotFound",
            "description": "Not Found"
          }
        },
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/New Transaction"
              }
            }
          }
        }
      }
    },
    "/transaction/withdraw": {
      "post": {
        "tags": [
          "transaction-api"
        ],
        "summary": "Create a withdraw transaction",
        "description": "Endpoint to create a withdraw transaction.",
        "operationId": "withdraw",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "$ref": "#/components/responses/WithdrawTransaction"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestWithdrawTransaction",
            "description": "Bad Request"
          },
          "404": {
            "$ref": "#/components/responses/AccountNotFound",
            "description": "Not Found"
          }
        },
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/New Transaction"
              }
            }
          }
        }
      }
    },
    "/transaction/{id}": {
      "get": {
        "tags": [
          "transaction-api"
        ],
        "summary": "Get a transaction",
        "description": "Endpoint to get a transaction.",
        "operationId": " ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the transaction."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Transaction",
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/InvalidId",
            "description": "Bad Request"
          },
          "404": {
            "$ref": "#/components/responses/NotFound",
            "description": "Not Found"
          }
        }
      }
    },
    "/transaction/account/{id}/balance": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Balance",
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/InvalidId",
            "description": "Bad Request"
          }
        }
      }
    },
    "/transaction/account/{id}/statement": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {}
      }
    }
  },
  "components": {
    "schemas": {
      "New Transaction": {
        "type": "object",
        "properties": {
          "account": {
            "type": "string",
            "description": "The account owner of the transaction",
            "example": "63cc9f72a23faefce2e1e80d"
          },
          "value": {
            "type": "number",
            "description": "The value of the transaction.",
            "example": 1000
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "field": {
                "type": "string",
                "example": "Error message"
              }
            }
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the transaction",
            "example": "63cca04bd6608851304d5f31"
          },
          "account": {
            "type": "string",
            "description": "The account owner of the transaction",
            "example": "63cc9f72a23faefce2e1e80d"
          },
          "value": {
            "type": "number",
            "description": "The value of the transaction, may be negative if <code>type == 'withdraw'</code> for example.",
            "example": 1000
          },
          "type": {
            "type": "string",
            "enum": [
              "deposit",
              "withdraw"
            ],
            "description": "The type of transaction",
            "example": "deposit"
          },
          "date": {
            "type": "string",
            "description": "The date of transaction",
            "example": "2023-01-22T02:51:41.436Z"
          }
        }
      }
    },
    "examples": {
      "DepositTransaction": {
        "id": "63cca04bd6608851304d5f31",
        "account": "63cc9f72a23faefce2e1e80d",
        "value": 1000,
        "type": "deposit",
        "date": "2023-01-22T02:51:41.436Z"
      },
      "WithdrawTransaction": {
        "id": "63cca04bd6608851304d5f31",
        "account": "63cc9f72a23faefce2e1e80d",
        "value": -1000,
        "type": "withdraw",
        "date": "2023-01-22T02:51:41.436Z"
      },
      "NewTransaction": {
        "account": "63cc9f72a23faefce2e1e80d",
        "value": 1000
      },
      "TransactionRequiredFieldsError": {
        "value": {
          "errors": {
            "value": "value is required",
            "account": "account is required"
          }
        }
      },
      "TransactionInvalidValueError": {
        "value": {
          "errors": {
            "value": "value should be more than 0"
          }
        }
      },
      "TransactionAccountBlockedError": {
        "value": {
          "errors": {
            "details": "account is blocked for transactions"
          }
        }
      },
      "TransactionAccountDisabledError": {
        "value": {
          "errors": {
            "details": "account is disabled for transactions"
          }
        }
      },
      "TransactionInsufficientFundsError": {
        "value": {
          "errors": {
            "details": "insufficient funds for transaction"
          }
        }
      }
    },
    "responses": {
      "Transaction": {
        "description": "Transaction",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Transaction"
            },
            "examples": {
              "Deposit Transaction": {
                "$ref": "#/components/examples/DepositTransaction"
              },
              "Withdraw Transaction": {
                "$ref": "#/components/examples/WithdrawTransaction"
              }
            }
          }
        }
      },
      "DepositTransaction": {
        "description": "Deposit Transaction",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Transaction"
            },
            "example": {
              "$ref": "#/components/examples/DepositTransaction"
            }
          }
        }
      },
      "WithdrawTransaction": {
        "description": "Withdraw Transaction",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Transaction"
            },
            "example": {
              "$ref": "#/components/examples/WithdrawTransaction"
            }
          }
        }
      },
      "Balance": {
        "description": "Balance",
        "content": {
          "application/json": {
            "example": {
              "balance": 1000
            }
          }
        }
      },
      "BadRequestDepositTransaction": {
        "description": "Invalid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "When required fields are missing": {
                "$ref": "#/components/examples/TransactionRequiredFieldsError"
              },
              "When value is less or equal to 0": {
                "$ref": "#/components/examples/TransactionInvalidValueError"
              },
              "When the account is blocked for transactions": {
                "$ref": "#/components/examples/TransactionAccountBlockedError"
              },
              "When the account is disabled for transactions": {
                "$ref": "#/components/examples/TransactionAccountDisabledError"
              }
            }
          }
        }
      },
      "BadRequestWithdrawTransaction": {
        "description": "Invalid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "When required fields are missing": {
                "$ref": "#/components/examples/TransactionRequiredFieldsError"
              },
              "When value is less or equal to 0": {
                "$ref": "#/components/examples/TransactionInvalidValueError"
              },
              "When the account is blocked for transactions": {
                "$ref": "#/components/examples/TransactionAccountBlockedError"
              },
              "When the account is disabled for transactions": {
                "$ref": "#/components/examples/TransactionAccountDisabledError"
              },
              "When the account has insufficient funds": {
                "$ref": "#/components/examples/TransactionInsufficientFundsError"
              }
            }
          }
        }
      },
      "AccountNotFound": {
        "description": "Accout not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "errors": {
                "holder": "Account not found"
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found"
      },
      "InvalidId": {
        "description": "Invalid id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "errors": {
                "id": "invalid id"
              }
            }
          }
        }
      }
    }
  }
}