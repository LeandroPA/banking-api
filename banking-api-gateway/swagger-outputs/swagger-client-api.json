{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "My API",
    "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "banking-api-gateway"
    },
    {
      "url": "http://localhost:3001",
      "description": "client-api"
    },
    {
      "url": "http://localhost:3002",
      "description": "account-api"
    },
    {
      "url": "http://localhost:3003",
      "description": "transaction-api"
    }
  ],
  "tags": [
    {
      "name": "client-api",
      "description": "Endpoints"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/person/": {
      "post": {
        "tags": [
          "client-api"
        ],
        "summary": "Create a person ",
        "description": "Endpoint for person creation.",
        "operationId": "createPerson",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "$ref": "#/components/responses/PersonCreated"
          },
          "400": {
            "$ref": "#/components/responses/NewPersonValidationCheck",
            "description": "Bad Request"
          },
          "409": {
            "$ref": "#/components/responses/DuplicateDocumentNumber",
            "description": "Conflict"
          }
        },
        "requestBody": {
          "required": true,
          "description": "A new physical person creation. Requires <code>fullname</code> and <code>documentNumber</code> (Brazil CPF format).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/New Person"
              }
            }
          }
        }
      }
    },
    "/person/{id}": {
      "get": {
        "tags": [
          "client-api"
        ],
        "summary": "Get a person ",
        "description": "Endpoint to get a person.",
        "operationId": " ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Id of the person. It can be the field <code>person.id</code> or <code>person.documentNumber</code>."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetPerson",
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/PersonInvalidId",
            "description": "Bad Request"
          },
          "404": {
            "$ref": "#/components/responses/NotFound",
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "New Person": {
        "type": "object",
        "properties": {
          "fullname": {
            "type": "string",
            "example": "Leandro Alencar"
          },
          "documentNumber": {
            "type": "string",
            "example": "45747215612"
          }
        },
        "required": [
          "fullname",
          "documentNumber"
        ]
      },
      "Person": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "63cc98a061eb8862867ac260"
          },
          "fullname": {
            "type": "string",
            "example": "Leandro Alencar"
          },
          "documentNumber": {
            "type": "string",
            "example": "45747215612"
          },
          "type": {
            "type": "string",
            "example": "physical"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-01-22T02:40:08.906Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-01-22T02:40:08.906Z"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "field": {
                "type": "string",
                "example": "Error message"
              }
            }
          }
        }
      }
    },
    "paramaters": {
      "PersonId": {
        "in": "path",
        "type": "string",
        "required": true,
        "format": ".*",
        "description": "Id of the person. It can be the field `person.id` or `person.documentNumber`."
      }
    },
    "responses": {
      "PersonCreated": {
        "description": "Resource created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Person"
            }
          }
        }
      },
      "GetPerson": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Person"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found"
      },
      "InvalidId": {
        "description": "Invalid id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "errors": {
                "id": "invalid id"
              }
            }
          }
        }
      },
      "PersonInvalidId": {
        "description": "Invalid id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "errors": {
                "id": "id must be a valid id or document number"
              }
            }
          }
        }
      },
      "NewPersonValidationCheck": {
        "description": "Errors on validating request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "errors": {
                "fullname": "fullname is required",
                "documentNumber": "Invalid documentNumber format"
              }
            }
          }
        }
      },
      "DuplicateDocumentNumber": {
        "description": "Duplicate value for documentNumber",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "errors": {
                "documentNumber": "Invalid documentNumber format"
              }
            }
          }
        }
      }
    }
  }
}