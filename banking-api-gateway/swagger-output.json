{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "My API",
    "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "banking-api-gateway"
    },
    {
      "url": "http://localhost:3001",
      "description": "client-api"
    },
    {
      "url": "http://localhost:3002",
      "description": "account-api"
    },
    {
      "url": "http://localhost:3003",
      "description": "transaction-api"
    }
  ],
  "tags": [
    {
      "name": "account-api",
      "description": "Endpoints for accounts management."
    },
    {
      "name": "client-api",
      "description": "Endpoints for clients management."
    },
    {
      "name": "transaction-api",
      "description": "Endpoints for accounts' transactions management."
    }
  ],
  "paths": {
    "/account/": {
      "post": {
        "tags": [
          "account-api"
        ],
        "summary": "Create an account",
        "description": "Endpoint for account creation.",
        "operationId": "createAccount",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "$ref": "#/components/responses/AccountCreated"
          },
          "400": {
            "$ref": "#/components/responses/HolderIsRequired",
            "description": "Bad Request"
          },
          "404": {
            "$ref": "#/components/responses/HolderNotFound",
            "description": "Not Found"
          }
        },
        "requestBody": {
          "required": true,
          "description": "A valid document number of physical person (Brazil CPF)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/New Account"
              }
            }
          }
        }
      }
    },
    "/account/{id}": {
      "get": {
        "tags": [
          "account-api"
        ],
        "summary": "Get an account",
        "description": "Get informations about an account.",
        "operationId": "getAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "63cc9f72a23faefce2e1e80d"
            },
            "description": "The a id of the account. It may be the field <code>${account.id}</code> or <code>${account.agency}-${account.number}</code>.<p>Examples: <code>63cc9f72a23faefce2e1e80d</code> or <code>0564-0000013-2</code></p>"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAccount",
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/AccountInvalidId",
            "description": "Bad Request"
          },
          "404": {
            "$ref": "#/components/responses/NotFound",
            "description": "Not Found"
          }
        }
      }
    },
    "/account/{id}/block": {
      "post": {
        "tags": [
          "account-api"
        ],
        "summary": "Block an account",
        "description": "Temporary block the account to prevent making transations.",
        "operationId": " ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "63cc9f72a23faefce2e1e80d"
            },
            "description": "The a id of the account. It may be the field <code>${account.id}</code> or <code>${account.agency}-${account.number}</code>.<p>Examples: <code>63cc9f72a23faefce2e1e80d</code> or <code>0564-0000013-2</code></p>"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAccount",
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestBlockAccount",
            "description": "Bad Request"
          },
          "404": {
            "$ref": "#/components/responses/NotFound",
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "account-api"
        ],
        "summary": "Unblock an account",
        "description": "Remove temporary block that prevents making transations.",
        "operationId": "unblockAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "63cc9f72a23faefce2e1e80d"
            },
            "description": "The a id of the account. It may be the field <code>${account.id}</code> or <code>${account.agency}-${account.number}</code>.<p>Examples: <code>63cc9f72a23faefce2e1e80d</code> or <code>0564-0000013-2</code></p>"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAccount",
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestUnblockAccount",
            "description": "Bad Request"
          },
          "404": {
            "$ref": "#/components/responses/NotFound",
            "description": "Not Found"
          }
        }
      }
    },
    "/account/{id}/disable": {
      "post": {
        "tags": [
          "account-api"
        ],
        "summary": "Disable an account",
        "description": "Disable an account permanently.",
        "operationId": "disableAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "63cc9f72a23faefce2e1e80d"
            },
            "description": "The a id of the account. It may be the field <code>${account.id}</code> or <code>${account.agency}-${account.number}</code>.<p>Examples: <code>63cc9f72a23faefce2e1e80d</code> or <code>0564-0000013-2</code></p>"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAccount",
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestDisableAccount",
            "description": "Bad Request"
          },
          "404": {
            "$ref": "#/components/responses/NotFound",
            "description": "Not Found"
          }
        }
      }
    },
    "/person/": {
      "post": {
        "tags": [
          "client-api"
        ],
        "summary": "Create a person ",
        "description": "Endpoint for person creation.",
        "operationId": "createPerson",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "$ref": "#/components/responses/PersonCreated"
          },
          "400": {
            "$ref": "#/components/responses/NewPersonValidationCheck",
            "description": "Bad Request"
          },
          "409": {
            "$ref": "#/components/responses/DuplicateDocumentNumber",
            "description": "Conflict"
          }
        },
        "requestBody": {
          "required": true,
          "description": "A new physical person creation. Requires <code>fullname</code> and <code>documentNumber</code> (Brazil CPF format).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/New Person"
              }
            }
          }
        }
      }
    },
    "/person/{id}": {
      "get": {
        "tags": [
          "client-api"
        ],
        "summary": "Get a person ",
        "description": "Endpoint to get a person.",
        "operationId": " ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the person. It can be the field <code>${person.id}</code> or <code>${person.documentNumber}</code>."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetPerson",
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/PersonInvalidId",
            "description": "Bad Request"
          },
          "404": {
            "$ref": "#/components/responses/NotFound",
            "description": "Not Found"
          }
        }
      }
    },
    "/transaction/deposit": {
      "post": {
        "tags": [
          "transaction-api"
        ],
        "summary": "Create a deposit transaction",
        "description": "Endpoint to create a deposit transaction.",
        "operationId": "deposit",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept_Language"
          },
          {
            "$ref": "#/components/parameters/Lang"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "$ref": "#/components/responses/DepositTransaction"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestDepositTransaction",
            "description": "Bad Request"
          },
          "404": {
            "$ref": "#/components/responses/AccountNotFound",
            "description": "Not Found"
          }
        },
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/New Transaction"
              }
            }
          }
        }
      }
    },
    "/transaction/withdraw": {
      "post": {
        "tags": [
          "transaction-api"
        ],
        "summary": "Create a withdraw transaction",
        "description": "Endpoint to create a withdraw transaction.",
        "operationId": "withdraw",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept_Language"
          },
          {
            "$ref": "#/components/parameters/Lang"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "$ref": "#/components/responses/WithdrawTransaction"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestWithdrawTransaction",
            "description": "Bad Request"
          },
          "404": {
            "$ref": "#/components/responses/AccountNotFound",
            "description": "Not Found"
          }
        },
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/New Transaction"
              }
            }
          }
        }
      }
    },
    "/transaction/transfer": {
      "post": {
        "tags": [
          "transaction-api"
        ],
        "summary": "Create a transfer transaction",
        "description": "Endpoint to create a transfer transaction.",
        "operationId": "transfer",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept_Language"
          },
          {
            "$ref": "#/components/parameters/Lang"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "$ref": "#/components/responses/WithdrawTransaction"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestWithdrawTransaction",
            "description": "Bad Request"
          },
          "404": {
            "$ref": "#/components/responses/AccountNotFound",
            "description": "Not Found"
          }
        },
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/New Transaction"
              }
            }
          }
        }
      }
    },
    "/transaction/{id}": {
      "get": {
        "tags": [
          "transaction-api"
        ],
        "summary": "Get a transaction",
        "description": "Endpoint to get a transaction.",
        "operationId": " ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the transaction."
          },
          {
            "$ref": "#/components/parameters/Accept_Language"
          },
          {
            "$ref": "#/components/parameters/Lang"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Transaction",
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/InvalidId",
            "description": "Bad Request"
          },
          "404": {
            "$ref": "#/components/responses/NotFound",
            "description": "Not Found"
          }
        }
      }
    },
    "/transaction/{id}/coupon": {
      "get": {
        "tags": [
          "transaction-api"
        ],
        "summary": "Get a coupon of a transaction",
        "description": "Endpoint to get a coupon of a transaction.",
        "operationId": "getCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the transaction."
          },
          {
            "$ref": "#/components/parameters/Accept_Language"
          },
          {
            "$ref": "#/components/parameters/Lang"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CouponTransaction",
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/InvalidId",
            "description": "Bad Request"
          },
          "404": {
            "$ref": "#/components/responses/NotFound",
            "description": "Not Found"
          }
        }
      }
    },
    "/transaction/account/{id}/balance": {
      "get": {
        "tags": [
          "transaction-api"
        ],
        "summary": "Get the balance of the account",
        "description": "Endpoint to get the balance of the account.",
        "operationId": "getBalance",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the account."
          },
          {
            "$ref": "#/components/parameters/Accept_Language"
          },
          {
            "$ref": "#/components/parameters/Lang"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Balance",
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/InvalidId",
            "description": "Bad Request"
          }
        }
      }
    },
    "/transaction/account/{id}/statement": {
      "get": {
        "tags": [
          "transaction-api"
        ],
        "summary": "Get the balance of the account",
        "description": "Endpoint to get the balance of the account.",
        "operationId": "getStatement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the transaction."
          },
          {
            "$ref": "#/components/parameters/Accept_Language"
          },
          {
            "$ref": "#/components/parameters/Lang"
          },
          {
            "name": "from",
            "in": "query",
            "format": "date",
            "required": false,
            "description": "The id of the transaction.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "format": "date",
            "required": false,
            "description": "The id of the transaction.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {}
      }
    }
  },
  "components": {
    "schemas": {
      "New Account": {
        "type": "object",
        "properties": {
          "holder": {
            "type": "string",
            "example": "45747215612"
          }
        },
        "required": [
          "holder"
        ]
      },
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "63cc9f72a23faefce2e1e80d"
          },
          "holder": {
            "type": "string",
            "example": "63cc98a061eb8862867ac260"
          },
          "agency": {
            "type": "string",
            "example": "0564"
          },
          "number": {
            "type": "string",
            "example": "0000013-2"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "blocked": {
            "type": "boolean",
            "example": false
          },
          "balance": {
            "type": "object",
            "properties": {
              "currency": {
                "type": "string",
                "example": "BRL"
              },
              "value": {
                "type": "number",
                "example": 0
              }
            }
          },
          "limits": {
            "type": "object",
            "properties": {
              "withdraw": {
                "type": "object",
                "properties": {
                  "daily": {
                    "type": "number",
                    "example": 2000
                  }
                }
              }
            }
          },
          "createdAt": {
            "type": "string",
            "example": "2023-01-22T02:46:02.298Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-01-22T02:46:02.298Z"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "field": {
                "type": "string",
                "example": "Error message"
              }
            }
          }
        }
      },
      "New Person": {
        "type": "object",
        "properties": {
          "fullname": {
            "type": "string",
            "example": "Leandro Alencar"
          },
          "documentNumber": {
            "type": "string",
            "example": "45747215612"
          }
        },
        "required": [
          "fullname",
          "documentNumber"
        ]
      },
      "Person": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "63cc98a061eb8862867ac260"
          },
          "fullname": {
            "type": "string",
            "example": "Leandro Alencar"
          },
          "documentNumber": {
            "type": "string",
            "example": "45747215612"
          },
          "type": {
            "type": "string",
            "example": "physical"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-01-22T02:40:08.906Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-01-22T02:40:08.906Z"
          }
        }
      },
      "New Transaction": {
        "type": "object",
        "properties": {
          "account": {
            "type": "string",
            "description": "The account owner of the transaction",
            "example": "63cc9f72a23faefce2e1e80d"
          },
          "value": {
            "type": "number",
            "description": "The value of the transaction.",
            "example": 1000
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the transaction",
            "example": "63cca04bd6608851304d5f31"
          },
          "account": {
            "type": "string",
            "description": "The account owner of the transaction",
            "example": "63cc9f72a23faefce2e1e80d"
          },
          "value": {
            "type": "number",
            "description": "The value of the transaction, may be negative if <code>type == 'withdraw'</code> for example.",
            "example": 1000
          },
          "type": {
            "type": "string",
            "enum": [
              "deposit",
              "withdraw",
              "transfer_in",
              "transfer_out"
            ],
            "description": "The type of transaction",
            "example": "deposit"
          },
          "date": {
            "type": "string",
            "description": "The date of transaction",
            "example": "2023-01-22T02:51:41.436Z"
          }
        }
      },
      "Coupon Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the transaction",
            "example": "63cca04bd6608851304d5f31"
          },
          "value": {
            "type": "number",
            "description": "The value of the transaction.",
            "example": 1000
          },
          "type": {
            "type": "string",
            "enum": [
              "deposit",
              "withdraw",
              "transfer_in",
              "transfer_out"
            ],
            "description": "The type of transaction",
            "example": "deposit"
          },
          "date": {
            "type": "string",
            "description": "The date of transaction",
            "example": "2023-01-22T02:51:41.436Z"
          },
          "accounts": {
            "type": "object",
            "description": "The accounts involving in the transaction",
            "properties": {
              "source": {
                "type": "object",
                "description": "The information about the source, where the value are debited.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The Id of the account",
                    "example": "63e834ed80f6d1131ef3f6a9"
                  },
                  "agency": {
                    "type": "string",
                    "description": "The agency number of the account",
                    "example": "0958"
                  },
                  "number": {
                    "type": "string",
                    "description": "The number of the account",
                    "example": "0000027-2"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the holder of the account",
                    "example": "Leandro Alencar"
                  },
                  "documentNumber": {
                    "type": "string",
                    "description": "The document number of the holder of the account",
                    "example": "42813376442"
                  }
                }
              },
              "destination": {
                "type": "object",
                "description": "The information about the destination, where the value are credited.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The Id of the account",
                    "example": "63e834ed80f6d1131ef3f6a9"
                  },
                  "agency": {
                    "type": "string",
                    "description": "The agency number of the account",
                    "example": "0958"
                  },
                  "number": {
                    "type": "string",
                    "description": "The number of the account",
                    "example": "0000027-2"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the holder of the account",
                    "example": "Leandro Alencar"
                  },
                  "documentNumber": {
                    "type": "string",
                    "description": "The document number of the holder of the account",
                    "example": "42813376442"
                  }
                }
              }
            }
          }
        }
      }
    },
    "examples": {
      "InvalidIdError": {
        "value": {
          "errors": {
            "id": "invalid id"
          }
        }
      },
      "AccountAlreadyBlockedError": {
        "value": {
          "errors": {
            "details": "Account already blocked"
          }
        }
      },
      "AccountAlreadyUnblockedError": {
        "value": {
          "errors": {
            "details": "Account already unblocked"
          }
        }
      },
      "AccountAlreadyDisabledError": {
        "value": {
          "errors": {
            "details": "Account already disabled"
          }
        }
      },
      "DepositTransaction": {
        "id": "63cca04bd6608851304d5f31",
        "account": "63cc9f72a23faefce2e1e80d",
        "value": 1000,
        "type": "deposit",
        "date": "2023-01-22T02:51:41.436Z"
      },
      "WithdrawTransaction": {
        "id": "63cca04bd6608851304d5f31",
        "account": "63cc9f72a23faefce2e1e80d",
        "value": -1000,
        "type": "withdraw",
        "date": "2023-01-22T02:51:41.436Z"
      },
      "NewTransaction": {
        "account": "63cc9f72a23faefce2e1e80d",
        "value": 1000
      },
      "TransactionRequiredFieldsError": {
        "value": {
          "errors": {
            "value": "value is required",
            "account": "account is required"
          }
        }
      },
      "TransactionInvalidValueError": {
        "value": {
          "errors": {
            "value": "value should be more than 0"
          }
        }
      },
      "TransactionAccountBlockedError": {
        "value": {
          "errors": {
            "details": "account is blocked for transactions"
          }
        }
      },
      "TransactionAccountDisabledError": {
        "value": {
          "errors": {
            "details": "account is disabled for transactions"
          }
        }
      },
      "TransactionInsufficientFundsError": {
        "value": {
          "errors": {
            "details": "insufficient funds for transaction"
          }
        }
      }
    },
    "parameters": {
      "AccountId": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "The a id of the account. It may be the field <code>${account.id}</code> or <code>${account.agency}-${account.number}</code>",
        "schema": {
          "type": "string",
          "example": "63cc9f72a23faefce2e1e80d"
        }
      },
      "Lang": {
        "name": "lang",
        "in": "query",
        "required": false,
        "enum": [
          "en-US",
          "pt-BR"
        ],
        "description": "The language for some resources in api. It is used by default by web browsers, see [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).",
        "example": "en-US"
      },
      "Accept_Language": {
        "name": "Accept-Language",
        "in": "headers",
        "required": false,
        "enum": [
          "en-US",
          "pt-BR"
        ],
        "description": "The language for some resources in api. It overrides the header <code>Accept-Language</code>.",
        "default": "en-US"
      }
    },
    "responses": {
      "AccountCreated": {
        "description": "Resource created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Account"
            }
          }
        }
      },
      "GetAccount": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Account"
            }
          }
        }
      },
      "HolderNotFound": {
        "description": "Holder not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "errors": {
                "holder": "Holder not found"
              }
            }
          }
        }
      },
      "HolderIsRequired": {
        "description": "Holder is required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "errors": {
                "holder": "holder is required"
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found"
      },
      "AccountInvalidId": {
        "description": "Invalid id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "errors": {
                "id": "invalid id"
              }
            }
          }
        }
      },
      "BadRequestBlockAccount": {
        "description": "Invalid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "When the id is invalid": {
                "$ref": "#/components/examples/InvalidIdError"
              },
              "When the account is already blocked": {
                "$ref": "#/components/examples/AccountAlreadyBlockedError"
              }
            }
          }
        }
      },
      "BadRequestUnblockAccount": {
        "description": "Invalid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "When the id is invalid": {
                "$ref": "#/components/examples/InvalidIdError"
              },
              "When the account is already unblocked": {
                "$ref": "#/components/examples/AccountAlreadyUnblockedError"
              }
            }
          }
        }
      },
      "BadRequestDisableAccount": {
        "description": "Invalid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "When the id is invalid": {
                "$ref": "#/components/examples/InvalidIdError"
              },
              "When the account is already disabled": {
                "$ref": "#/components/examples/AccountAlreadyDisabledError"
              }
            }
          }
        }
      },
      "AccountAlreadyDisabled": {
        "description": "Account already disabled",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "errors": {
                "details": "Account already disabled"
              }
            }
          }
        }
      },
      "PersonCreated": {
        "description": "Resource created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Person"
            }
          }
        }
      },
      "GetPerson": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Person"
            }
          }
        }
      },
      "InvalidId": {
        "description": "Invalid id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "errors": {
                "id": "invalid id"
              }
            }
          }
        }
      },
      "PersonInvalidId": {
        "description": "Invalid id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "errors": {
                "id": "id must be a valid id or document number"
              }
            }
          }
        }
      },
      "NewPersonValidationCheck": {
        "description": "Errors on validating request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "errors": {
                "fullname": "fullname is required",
                "documentNumber": "Invalid documentNumber format"
              }
            }
          }
        }
      },
      "DuplicateDocumentNumber": {
        "description": "Duplicate value for documentNumber",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "errors": {
                "documentNumber": "Invalid documentNumber format"
              }
            }
          }
        }
      },
      "Transaction": {
        "description": "Transaction",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Transaction"
            },
            "examples": {
              "Deposit Transaction": {
                "$ref": "#/components/examples/DepositTransaction"
              },
              "Withdraw Transaction": {
                "$ref": "#/components/examples/WithdrawTransaction"
              }
            }
          }
        }
      },
      "CouponTransaction": {
        "description": "CouponTransaction",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Coupon Transaction"
            }
          }
        }
      },
      "DepositTransaction": {
        "description": "Deposit Transaction",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Transaction"
            },
            "example": {
              "$ref": "#/components/examples/DepositTransaction"
            }
          }
        }
      },
      "WithdrawTransaction": {
        "description": "Withdraw Transaction",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Transaction"
            },
            "example": {
              "$ref": "#/components/examples/WithdrawTransaction"
            }
          }
        }
      },
      "Balance": {
        "description": "Balance",
        "content": {
          "application/json": {
            "example": {
              "balance": 1000
            }
          }
        }
      },
      "BadRequestDepositTransaction": {
        "description": "Invalid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "When required fields are missing": {
                "$ref": "#/components/examples/TransactionRequiredFieldsError"
              },
              "When value is less or equal to 0": {
                "$ref": "#/components/examples/TransactionInvalidValueError"
              },
              "When the account is blocked for transactions": {
                "$ref": "#/components/examples/TransactionAccountBlockedError"
              },
              "When the account is disabled for transactions": {
                "$ref": "#/components/examples/TransactionAccountDisabledError"
              }
            }
          }
        }
      },
      "BadRequestWithdrawTransaction": {
        "description": "Invalid request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "When required fields are missing": {
                "$ref": "#/components/examples/TransactionRequiredFieldsError"
              },
              "When value is less or equal to 0": {
                "$ref": "#/components/examples/TransactionInvalidValueError"
              },
              "When the account is blocked for transactions": {
                "$ref": "#/components/examples/TransactionAccountBlockedError"
              },
              "When the account is disabled for transactions": {
                "$ref": "#/components/examples/TransactionAccountDisabledError"
              },
              "When the account has insufficient funds": {
                "$ref": "#/components/examples/TransactionInsufficientFundsError"
              }
            }
          }
        }
      },
      "AccountNotFound": {
        "description": "Accout not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "errors": {
                "holder": "Account not found"
              }
            }
          }
        }
      }
    }
  }
}
